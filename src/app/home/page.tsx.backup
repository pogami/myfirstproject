
"use client";

import { Button } from "@/components/ui/button";
import Link from "next/link";
import { CourseConnectLogo } from "@/components/icons/courseconnect-logo";
import { useEffect, useState, useRef } from "react";
import { ArrowRight, BookOpen, Bot, Mail, MessageSquare, Users, Upload, GraduationCap, Send, User, CheckCircle, Sparkles, FileText, Clock, Loader2, X, MessageCircle, TrendingUp, Smartphone } from "lucide-react";
import { cn } from "@/lib/utils";
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Avatar, AvatarFallback } from "@/components/ui/avatar";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { useToast } from "@/hooks/use-toast";
import { Toaster } from "@/components/ui/toaster";
import { analyzeSyllabus } from "@/ai/flows/analyze-syllabus";
import { generateFlashcards } from "@/ai/flows/generate-flashcards";
import { Flashcard } from "@/ai/schemas/flashcard-schemas";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog"
import { useRouter } from "next/navigation";
import { Hero } from "@/components/hero";


const popularClasses = [
    { name: "BIO-101", description: "Intro to Biology", icon: <Bot className="size-8 text-green-500" />, studentCount: 123 },
    { name: "CS-202", description: "Data Structures", icon: <Users className="size-8 text-blue-500" />, studentCount: 88 },
    { name: "ENG-210", description: "Shakespeare", icon: <MessageSquare className="size-8 text-amber-500" />, studentCount: 45 },
    { name: "HIST-301", description: "American History", icon: <BookOpen className="size-8 text-red-500" />, studentCount: 92 },
    { name: "PSYCH-101", description: "Intro to Psychology", icon: <Bot className="size-8 text-purple-500" />, studentCount: 150 },
    { name: "MATH-203", description: "Linear Algebra", icon: <Users className="size-8 text-indigo-500" />, studentCount: 76 },
]

// Demo data
const demoClasses = [
  { name: "CS-101: Intro to Computer Science", students: 45, messages: 127, lastActivity: "2 min ago" },
  { name: "BIO-201: Cell Biology", students: 32, messages: 89, lastActivity: "5 min ago" },
  { name: "ENG-210: Shakespeare Studies", students: 28, messages: 156, lastActivity: "1 hour ago" },
];

const demoMessages = [
  { sender: "bot", name: "CourseConnect AI", text: "Welcome to the CS-101 study group! I'm here to help with any questions about computer science fundamentals.", timestamp: Date.now() - 300000 },
  { sender: "user", name: "Sarah M.", text: "Can someone explain how recursion works? I'm struggling with the concept.", timestamp: Date.now() - 240000 },
  { sender: "user", name: "Alex K.", text: "Sure! Think of recursion like a Russian nesting doll - a function that calls itself with a smaller version of the problem.", timestamp: Date.now() - 180000 },
  { sender: "bot", name: "CourseConnect AI", text: "Great explanation Alex! Here's a simple example: function factorial(n) { return n <= 1 ? 1 : n * factorial(n-1); }", timestamp: Date.now() - 120000 },
  { sender: "user", name: "Mike R.", text: "That makes so much sense! Thanks both of you.", timestamp: Date.now() - 60000 },
];

const demoFlashcards = [
  { front: "What is recursion?", back: "A programming technique where a function calls itself to solve smaller instances of the same problem." },
  { front: "What is the base case in recursion?", back: "The condition that stops the recursive calls and returns a value without further recursion." },
  { front: "What is the time complexity of binary search?", back: "O(log n) - it divides the search space in half with each comparison." },
];

export default function LandingPage() {
    const [showSignupAlert, setShowSignupAlert] = useState(false);
    const [currentFlashcard, setCurrentFlashcard] = useState(0);
    const [showAnswer, setShowAnswer] = useState(false);
    const [chatMessage, setChatMessage] = useState("");
    
    // Real file upload state
    const [uploadedFile, setUploadedFile] = useState<File | null>(null);
    const [isAnalyzing, setIsAnalyzing] = useState(false);
    const [analysisProgress, setAnalysisProgress] = useState(0);
    const [analysisResult, setAnalysisResult] = useState<any>(null);
    const [realFlashcards, setRealFlashcards] = useState<Flashcard[]>([]);
    const [isGeneratingFlashcards, setIsGeneratingFlashcards] = useState(false);
    const fileInputRef = useRef<HTMLInputElement>(null);
    const { toast } = useToast();
    const router = useRouter();

    useEffect(() => {
        const signupAlertShown = sessionStorage.getItem('signupAlertShown');
        if (!signupAlertShown) {
            const timer = setTimeout(() => {
                setShowSignupAlert(true);
                sessionStorage.setItem('signupAlertShown', 'true');
            }, 5000); // Show after 5 seconds

            return () => clearTimeout(timer);
        }
    }, []);
  
  const handleSignUpClick = () => {
    setShowSignupAlert(false);
    router.push('/login?state=signup');
  }

  const handleSendMessage = () => {
    if (chatMessage.trim()) {
      // Simulate sending a message
      setChatMessage("");
    }
  };

  const nextFlashcard = () => {
    const totalCards = realFlashcards.length > 0 ? realFlashcards.length : demoFlashcards.length;
    setCurrentFlashcard((prev) => (prev + 1) % totalCards);
    setShowAnswer(false);
  };

  const prevFlashcard = () => {
    const totalCards = realFlashcards.length > 0 ? realFlashcards.length : demoFlashcards.length;
    setCurrentFlashcard((prev) => (prev - 1 + totalCards) % totalCards);
    setShowAnswer(false);
  };

  // File upload handlers
  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      console.log("File selected:", file.name, "Type:", file.type, "Size:", file.size);
      
      // Check file size (limit to 10MB)
      if (file.size > 10 * 1024 * 1024) {
        toast({
          variant: "destructive",
          title: "File Too Large",
          description: "Please upload a file smaller than 10MB",
        });
        return;
      }
      
      // Check file type
      const allowedTypes = ['application/pdf', 'text/plain', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'];
      if (!allowedTypes.includes(file.type)) {
        toast({
          variant: "destructive",
          title: "Unsupported File Type",
          description: "Please upload a PDF, DOC, DOCX, or TXT file",
        });
        return;
      }
      
      setUploadedFile(file);
    }
  };

  const handleDemoFile = async () => {
    try {
      const response = await fetch('/demo-syllabus.txt');
      const text = await response.text();
      const blob = new Blob([text], { type: 'text/plain' });
      const file = new File([blob], 'demo-syllabus.txt', { type: 'text/plain' });
      setUploadedFile(file);
      toast({
        title: "Demo File Loaded",
        description: "Using sample CS-101 syllabus for demonstration",
      });
    } catch (error) {
      toast({
        variant: "destructive",
        title: "Error",
        description: "Could not load demo file",
      });
    }
  };

  const handleAnalyzeFile = async (retryCount = 0) => {
    if (!uploadedFile) return;

    setIsAnalyzing(true);
    setAnalysisProgress(0);

    // Simulate progress
    const progressInterval = setInterval(() => {
      setAnalysisProgress(prev => {
        if (prev >= 90) {
          clearInterval(progressInterval);
          return 90;
        }
        return prev + 10;
      });
    }, 200);

    try {
      const reader = new FileReader();
      reader.readAsDataURL(uploadedFile);
      
      reader.onload = async (readerEvent) => {
        const fileDataUri = readerEvent.target?.result as string;
        
        try {
          // Try real AI analysis first
          console.log("Starting AI analysis for file:", uploadedFile.name, "Size:", uploadedFile.size);
          const result = await analyzeSyllabus({ fileDataUri });
          console.log("AI analysis result:", result);
          setAnalysisProgress(100);
          setAnalysisResult(result);

          if (result.isSyllabus) {
            toast({
              title: "Analysis Complete!",
              description: `Found syllabus for ${result.classCode}: ${result.className}`,
            });
            
            // Generate flashcards from the syllabus
            await generateFlashcardsFromSyllabus(result);
          } else {
            toast({
              variant: "destructive",
              title: "Not a Syllabus",
              description: "The uploaded file doesn't appear to be a syllabus",
            });
          }
        } catch (aiError) {
          console.error("AI Analysis error:", aiError);
          
          const errorMessage = aiError instanceof Error ? aiError.message : 'Unknown error';
          
          // Check for specific error types
          if (errorMessage.includes('503') || errorMessage.includes('overloaded') || errorMessage.includes('Service Unavailable')) {
            if (retryCount < 2) {
              // Retry up to 2 times with exponential backoff
              const delay = Math.pow(2, retryCount) * 1000; // 1s, 2s, 4s
              console.log(`Retrying in ${delay}ms (attempt ${retryCount + 1}/3)`);
              
              setTimeout(() => {
                handleAnalyzeFile(retryCount + 1);
              }, delay);
              
              toast({
                title: "Retrying...",
                description: `AI service busy. Retrying in ${delay/1000} seconds...`,
              });
              return;
            } else {
              toast({
                variant: "destructive",
                title: "AI Service Busy",
                description: "Google AI is temporarily overloaded. Please try again in a few minutes.",
              });
            }
          } else if (uploadedFile.name.includes('demo') || uploadedFile.name.includes('CS-101')) {
            // Fallback to demo analysis for demo purposes
            const demoResult = {
              isSyllabus: true,
              classCode: "CS-101",
              className: "Introduction to Computer Science"
            };
            
            setAnalysisProgress(100);
            setAnalysisResult(demoResult);
            
            toast({
              title: "Demo Analysis Complete!",
              description: `Found syllabus for ${demoResult.classCode}: ${demoResult.className}`,
            });
            
            // Generate demo flashcards
            await generateDemoFlashcards();
          } else {
            // Show detailed error for debugging
            console.error("Detailed error:", errorMessage);
            
            toast({
              variant: "destructive",
              title: "Analysis Failed",
              description: `AI analysis failed: ${errorMessage}. Please try again later.`,
            });
          }
        } finally {
          setIsAnalyzing(false);
          clearInterval(progressInterval);
        }
      };
    } catch (error) {
      console.error("File reading error:", error);
      setIsAnalyzing(false);
      clearInterval(progressInterval);
    }
  };

  const generateFlashcardsFromSyllabus = async (syllabusResult: any) => {
    setIsGeneratingFlashcards(true);
    try {
      const result = await generateFlashcards({
        className: `${syllabusResult.classCode}: ${syllabusResult.className}`,
        context: `This is a syllabus for ${syllabusResult.classCode}: ${syllabusResult.className}. Generate flashcards covering the key concepts, topics, and learning objectives from this course.`
      });
      
      setRealFlashcards(result.flashcards);
      toast({
        title: "Flashcards Generated!",
        description: `Created ${result.flashcards.length} flashcards for your course`,
      });
    } catch (error) {
      console.error("Flashcard generation error:", error);
      toast({
        variant: "destructive",
        title: "Flashcard Generation Failed",
        description: "Could not generate flashcards",
      });
    } finally {
      setIsGeneratingFlashcards(false);
    }
  };

  const generateDemoFlashcards = async () => {
    setIsGeneratingFlashcards(true);
    try {
      const result = await generateFlashcards({
        className: "CS-101: Introduction to Computer Science",
        context: "This is a syllabus for CS-101: Introduction to Computer Science. Generate flashcards covering the key concepts, topics, and learning objectives from this course."
      });
      
      setRealFlashcards(result.flashcards);
      toast({
        title: "Demo Flashcards Generated!",
        description: `Created ${result.flashcards.length} flashcards for CS-101`,
      });
    } catch (error) {
      console.error("Demo flashcard generation error:", error);
      
      // Fallback to static demo flashcards
      const demoFlashcards = [
        { question: "What is a variable in programming?", answer: "A variable is a storage location with an associated name that contains data which can be modified during program execution." },
        { question: "What is the difference between a list and an array?", answer: "A list is a dynamic data structure that can grow/shrink, while an array has a fixed size. Lists are more flexible but arrays are more memory efficient." },
        { question: "What is recursion?", answer: "Recursion is a programming technique where a function calls itself to solve smaller instances of the same problem." },
        { question: "What is the time complexity of binary search?", answer: "O(log n) - binary search divides the search space in half with each comparison." },
        { question: "What is object-oriented programming?", answer: "OOP is a programming paradigm based on objects that contain data (attributes) and code (methods), promoting code reusability and organization." }
      ];
      
      setRealFlashcards(demoFlashcards);
      toast({
        title: "Demo Flashcards Generated!",
        description: `Created ${demoFlashcards.length} flashcards for CS-101`,
      });
    } finally {
      setIsGeneratingFlashcards(false);
    }
  };

  const clearUpload = () => {
    setUploadedFile(null);
    setAnalysisResult(null);
    setRealFlashcards([]);
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }
  };

  return (
    <div className="flex min-h-screen flex-col bg-background overflow-hidden relative">
      <style>
        {`
            :root {
                --primary-hsl: 203 76% 70%;
                --background-hsl: 204 100% 96%;
            }
            .dark {
                --primary-hsl: 203 70% 65%;
                --background-hsl: 210 15% 12%;
            }
            
            /* Ensure proper centering */
            body {
                margin: 0;
                padding: 0;
            }
            
            .container {
                width: 100%;
                margin-left: auto;
                margin-right: auto;
            }
        `}
      </style>
      <header className="sticky top-0 z-50 w-full border-b border-border/40 bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60">
        <div className="container flex h-20 max-w-6xl mx-auto px-6 items-center justify-between">
            <Link href="/home" className="flex items-center gap-3">
                <CourseConnectLogo className="h-9 w-9 text-primary" />
                <h1 className="text-3xl font-bold text-primary tracking-tight">CourseConnect</h1>
            </Link>
            <div className="flex items-center gap-4">
                <Button variant="ghost" size="lg" asChild className="hover:bg-transparent">
                    <Link href="/login">Sign In</Link>
                </Button>
                <Button size="lg" asChild>
                    <Link href="/dashboard">Get Started <ArrowRight className="ml-2" /></Link>
                </Button>
            </div>
        </div>
      </header>
      <main className="flex-1">
        <Hero />
        <div className="container max-w-6xl mx-auto px-6">
          {/* Features Section */}
          <div className="mt-24 w-full">
            <div className="text-center mb-16">
              <h2 className="text-4xl font-bold tracking-tight mb-6">Everything You Need to Succeed</h2>
              <p className="text-xl text-muted-foreground max-w-3xl mx-auto">
                CourseConnect combines AI-powered analysis with collaborative study tools to help you ace every class.
              </p>
            </div>

            {/* Feature Cards Grid */}
            <div className="grid gap-8 md:grid-cols-2 lg:grid-cols-3 mb-16">

              {/* AI Syllabus Analysis */}
              <Card className="group hover:shadow-xl transition-all duration-300 hover:-translate-y-2">
                <div className="grid gap-6 md:grid-cols-3">
                  <Card>
                    <CardHeader>
                      <CardTitle className="flex items-center gap-2">
                        <Users className="h-5 w-5 text-primary" />
                        Active Classes
                      </CardTitle>
                      <CardDescription>Your current study groups</CardDescription>
                    </CardHeader>
                    <CardContent>
                      <div className="text-3xl font-bold">3</div>
                      <p className="text-sm text-muted-foreground">Classes joined</p>
                    </CardContent>
                  </Card>

                  <Card>
                    <CardHeader>
                      <CardTitle className="flex items-center gap-2">
                        <MessageSquare className="h-5 w-5 text-green-500" />
                        Messages Today
                      </CardTitle>
                      <CardDescription>Study group activity</CardDescription>
                    </CardHeader>
                    <CardContent>
                      <div className="text-3xl font-bold">47</div>
                      <p className="text-sm text-muted-foreground">Messages sent</p>
                    </CardContent>
                  </Card>

                  <Card>
                    <CardHeader>
                      <CardTitle className="flex items-center gap-2">
                        <GraduationCap className="h-5 w-5 text-amber-500" />
                        Flashcards Created
                      </CardTitle>
                      <CardDescription>AI-generated study cards</CardDescription>
                    </CardHeader>
                    <CardContent>
                      <div className="text-3xl font-bold">24</div>
                      <p className="text-sm text-muted-foreground">Cards generated</p>
                    </CardContent>
                  </Card>
                </div>

                <Card>
                  <CardHeader>
                    <CardTitle>Your Study Groups</CardTitle>
                    <CardDescription>Classes you're currently enrolled in</CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                      {demoClasses.map((cls, index) => (
                        <div key={index} className="flex items-center justify-between p-4 border rounded-lg">
                          <div className="flex items-center gap-4">
                            <div className="p-2 rounded-full bg-primary/10">
                              <BookOpen className="h-5 w-5 text-primary" />
                            </div>
                            <div>
                              <h3 className="font-semibold">{cls.name}</h3>
                              <p className="text-sm text-muted-foreground">
                                {cls.students} students • {cls.messages} messages • {cls.lastActivity}
                              </p>
                            </div>
                          </div>
                          <Button variant="outline" size="sm">
                            View Chat
                          </Button>
                        </div>
                      ))}
                    </div>
                  </CardContent>
                </Card>
              </TabsContent>

              {/* Upload Tab */}
              <TabsContent value="upload" className="space-y-6">
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <Upload className="h-5 w-5 text-primary" />
                      Upload Your Syllabus
                    </CardTitle>
                    <CardDescription>
                      Upload a real syllabus or try our demo file to see AI analysis in action
                    </CardDescription>
                  </CardHeader>
                  <CardContent className="space-y-6">
                    {!uploadedFile ? (
                      <div className="border-2 border-dashed border-border rounded-lg p-8 text-center">
                        <Upload className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
                        <h3 className="text-lg font-semibold mb-2">Drop your syllabus here</h3>
                        <p className="text-muted-foreground mb-4">
                          Supported formats: PDF, DOC, DOCX, TXT
                        </p>
                        <div className="flex gap-4 justify-center">
                          <input
                            ref={fileInputRef}
                            type="file"
                            accept=".pdf,.doc,.docx,.txt"
                            onChange={handleFileChange}
                            className="hidden"
                          />
                          <Button onClick={() => fileInputRef.current?.click()}>
                            <FileText className="mr-2 h-4 w-4" />
                            Choose File
                          </Button>
                          <Button variant="outline" onClick={handleDemoFile}>
                            <Sparkles className="mr-2 h-4 w-4" />
                            Try Demo File
                          </Button>
                        </div>
                      </div>
                    ) : (
                      <div className="border rounded-lg p-6">
                        <div className="flex items-center justify-between mb-4">
                          <div className="flex items-center gap-3">
                            <FileText className="h-8 w-8 text-primary" />
                            <div>
                              <h3 className="font-semibold">{uploadedFile.name}</h3>
                              <p className="text-sm text-muted-foreground">
                                {(uploadedFile.size / 1024).toFixed(1)} KB
                              </p>
                            </div>
                          </div>
                          <Button variant="outline" size="sm" onClick={clearUpload}>
                            <X className="h-4 w-4" />
                          </Button>
                        </div>
                        
                        {!isAnalyzing && !analysisResult && (
                          <Button onClick={handleAnalyzeFile} className="w-full">
                            <Sparkles className="mr-2 h-4 w-4" />
                            Analyze with AI
                          </Button>
                        )}

                        {isAnalyzing && (
                          <div className="space-y-4">
                            <div className="text-center">
                              <Loader2 className="h-8 w-8 animate-spin mx-auto mb-2 text-primary" />
                              <p className="text-sm text-muted-foreground">AI is analyzing your syllabus...</p>
                            </div>
                            <Progress value={analysisProgress} className="w-full" />
                          </div>
                        )}

                        {analysisResult && (
                          <div className="space-y-4">
                            <div className="bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 rounded-lg p-4">
                              <div className="flex items-center gap-2 mb-2">
                                <CheckCircle className="h-5 w-5 text-green-500" />
                                <h4 className="font-semibold text-green-800 dark:text-green-200">Analysis Complete!</h4>
                              </div>
                              <div className="text-sm text-green-700 dark:text-green-300">
                                <p><strong>Class Code:</strong> {analysisResult.classCode}</p>
                                <p><strong>Class Name:</strong> {analysisResult.className}</p>
                                <p><strong>Is Syllabus:</strong> {analysisResult.isSyllabus ? 'Yes' : 'No'}</p>
                              </div>
                            </div>

                            {isGeneratingFlashcards ? (
                              <div className="text-center">
                                <Loader2 className="h-6 w-6 animate-spin mx-auto mb-2 text-primary" />
                                <p className="text-sm text-muted-foreground">Generating flashcards...</p>
                              </div>
                            ) : realFlashcards.length > 0 && (
                              <div className="bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-4">
                                <div className="flex items-center gap-2 mb-2">
                                  <GraduationCap className="h-5 w-5 text-blue-500" />
                                  <h4 className="font-semibold text-blue-800 dark:text-blue-200">Flashcards Generated!</h4>
                                </div>
                                <p className="text-sm text-blue-700 dark:text-blue-300 mb-2">
                                  Created {realFlashcards.length} flashcards for your course
                                </p>
                                <Button 
                                  variant="outline" 
                                  size="sm"
                                  onClick={() => setActiveDemoTab("flashcards")}
                                >
                                  View Flashcards
                                </Button>
                              </div>
                            )}
                          </div>
                        )}
                      </div>
                    )}

                    <div className="bg-muted/50 rounded-lg p-4">
                      <h4 className="font-semibold mb-2 flex items-center gap-2">
                        <Sparkles className="h-4 w-4 text-primary" />
                        What happens after upload?
                      </h4>
                      <ul className="space-y-2 text-sm text-muted-foreground">
                        <li className="flex items-center gap-2">
                          <CheckCircle className="h-4 w-4 text-green-500" />
                          AI analyzes your syllabus content
                        </li>
                        <li className="flex items-center gap-2">
                          <CheckCircle className="h-4 w-4 text-green-500" />
                          Automatically joins relevant study groups
                        </li>
                        <li className="flex items-center gap-2">
                          <CheckCircle className="h-4 w-4 text-green-500" />
                          Creates personalized chat room
                        </li>
                        <li className="flex items-center gap-2">
                          <CheckCircle className="h-4 w-4 text-green-500" />
                          Generates study materials and flashcards
                        </li>
                      </ul>
                    </div>
                  </CardContent>
                </Card>
              </TabsContent>

              {/* Chat Tab */}
              <TabsContent value="chat" className="space-y-6">
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <MessageSquare className="h-5 w-5 text-green-500" />
                      CS-101 Study Group Chat
                    </CardTitle>
                    <CardDescription>
                      Real-time collaboration with classmates and CourseConnect AI assistance
                    </CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                      {/* Chat Messages */}
                      <div className="h-96 overflow-y-auto border rounded-lg p-4 space-y-4">
                        {demoMessages.map((message, index) => (
                          <div key={index} className={`flex gap-3 ${message.sender === 'user' ? 'flex-row-reverse' : ''}`}>
                            <Avatar className="h-8 w-8">
                              <AvatarFallback>
                                {message.sender === 'bot' ? <Bot className="h-4 w-4" /> : <User className="h-4 w-4" />}
                              </AvatarFallback>
                            </Avatar>
                            <div className={`flex-1 ${message.sender === 'user' ? 'text-right' : ''}`}>
                              <div className="flex items-center gap-2 mb-1">
                                <span className="text-sm font-medium">{message.name}</span>
                                <span className="text-xs text-muted-foreground">
                                  {new Date(message.timestamp).toLocaleTimeString()}
                                </span>
                              </div>
                              <div className={`inline-block p-3 rounded-lg ${
                                message.sender === 'bot' 
                                  ? 'bg-muted' 
                                  : 'bg-primary text-primary-foreground'
                              }`}>
                                {message.text}
                              </div>
                            </div>
                          </div>
                        ))}
                      </div>

                      {/* Chat Input */}
                      <div className="flex gap-2">
                        <Input
                          placeholder="Ask a question or share something..."
                          value={chatMessage}
                          onChange={(e) => setChatMessage(e.target.value)}
                          onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
                        />
                        <Button onClick={handleSendMessage} disabled={!chatMessage.trim()}>
                          <Send className="h-4 w-4" />
                        </Button>
                      </div>

                      <div className="text-xs text-muted-foreground text-center">
                        💡 In the real app, messages are sent instantly and CourseConnect AI responds with helpful study assistance
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </TabsContent>

              {/* Flashcards Tab */}
              <TabsContent value="flashcards" className="space-y-6">
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <GraduationCap className="h-5 w-5 text-amber-500" />
                      AI-Generated Flashcards
                    </CardTitle>
                    <CardDescription>
                      Study cards automatically created from your class materials
                    </CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-6">
                      {/* Flashcard */}
                      <div className="aspect-video border-2 border-border rounded-lg p-8 flex flex-col justify-center items-center text-center">
                        <div className="mb-4">
                          <Badge variant="outline">
                            Card {currentFlashcard + 1} of {realFlashcards.length > 0 ? realFlashcards.length : demoFlashcards.length}
                          </Badge>
                        </div>
                        
                        <div className="mb-6">
                          <h3 className="text-xl font-semibold mb-4">
                            {realFlashcards.length > 0 ? (
                              showAnswer ? realFlashcards[currentFlashcard].answer : realFlashcards[currentFlashcard].question
                            ) : (
                              showAnswer ? demoFlashcards[currentFlashcard].back : demoFlashcards[currentFlashcard].front
                            )}
                          </h3>
                        </div>

                        <div className="flex gap-4">
                          <Button variant="outline" onClick={prevFlashcard}>
                            Previous
                          </Button>
                          <Button 
                            onClick={() => setShowAnswer(!showAnswer)}
                            variant={showAnswer ? "secondary" : "default"}
                          >
                            {showAnswer ? "Show Question" : "Show Answer"}
                          </Button>
                          <Button variant="outline" onClick={nextFlashcard}>
                            Next
                          </Button>
                        </div>
                      </div>

                      <div className="grid grid-cols-3 gap-4">
                        <div className="text-center p-4 border rounded-lg">
                          <div className="text-2xl font-bold text-green-500">8</div>
                          <div className="text-sm text-muted-foreground">Mastered</div>
                        </div>
                        <div className="text-center p-4 border rounded-lg">
                          <div className="text-2xl font-bold text-yellow-500">12</div>
                          <div className="text-sm text-muted-foreground">Learning</div>
                        </div>
                        <div className="text-center p-4 border rounded-lg">
                          <div className="text-2xl font-bold text-red-500">4</div>
                          <div className="text-sm text-muted-foreground">Needs Review</div>
                        </div>
                      </div>

                      <div className="bg-muted/50 rounded-lg p-4">
                        <h4 className="font-semibold mb-2 flex items-center gap-2">
                          <Sparkles className="h-4 w-4 text-primary" />
                          AI-Powered Generation
                        </h4>
                        <p className="text-sm text-muted-foreground">
                          Flashcards are automatically generated from your syllabus, lecture notes, and chat discussions. 
                          The AI identifies key concepts and creates effective study cards tailored to your course content.
                        </p>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </TabsContent>
            </Tabs>
          </div>

          {/* Popular Classes Section */}
          <div className="mt-24 w-full">
            <h2 className="text-3xl font-bold tracking-tight mb-6 text-center">Popular Classes</h2>
            <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4">
              {popularClasses.map((pClass) => (
                <Card key={pClass.name} className="flex flex-col items-center text-center p-4 transition-all hover:shadow-xl hover:-translate-y-1 bg-card/80 backdrop-blur-sm">
                  <div className="mb-3 p-3 rounded-full bg-primary/10">
                    {pClass.icon}
                  </div>
                  <h3 className="font-semibold">{pClass.name}</h3>
                  <p className="text-xs text-muted-foreground mb-2">{pClass.description}</p>
                   <div className="flex items-center gap-1.5 text-xs text-muted-foreground">
                    <Users className="size-3" />
                    <span>{pClass.studentCount} students</span>
                  </div>
                </Card>
              ))}
            </div>
          </div>
        </div>
      </main>
      <footer className="py-8 border-t bg-background/95 z-10">
        <div className="container max-w-6xl mx-auto px-6 text-center text-muted-foreground">
            © {new Date().getFullYear()} CourseConnect. All rights reserved.
        </div>
      </footer>

       <AlertDialog open={showSignupAlert} onOpenChange={setShowSignupAlert}>
          <AlertDialogContent>
            <AlertDialogHeader>
               <div className="flex justify-center">
                <div className="rounded-full bg-primary/10 p-3 border-2 border-primary/20">
                  <Mail className="h-8 w-8 text-primary" />
                </div>
              </div>
              <AlertDialogTitle className="text-center text-2xl">Ready to Join?</AlertDialogTitle>
              <AlertDialogDescription className="text-center">
                Create a free account to save your classes, connect with students, and unlock all features.
              </AlertDialogDescription>
            </AlertDialogHeader>
            <AlertDialogFooter className="flex-col gap-2">
              <AlertDialogAction onClick={handleSignUpClick} className="w-full">
                Sign Up With Email
              </AlertDialogAction>
              <AlertDialogCancel asChild className="w-full mt-0">
                 <Button variant="ghost" className="hover:bg-transparent">Maybe Later</Button>
              </AlertDialogCancel>
            </AlertDialogFooter>
          </AlertDialogContent>
        </AlertDialog>

        <Toaster />
    </div>
  );
}
